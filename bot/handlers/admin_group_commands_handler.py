from aiogram.types import Message, FSInputFile
from aiogram.filters import Command, CommandObject

from bot.main import MAINTENANCE, START_MESSAGE_ANALYTICS
from bot.handlers.routers import admin_group_commands_router

from logs.config import logger


def _get_maintenance_data() -> dict:
    """
    :return: Maintenance options of the main bot
    """
    json_data = MAINTENANCE.get_data()
    if not json_data:
        json_data = {"maintenance": {"maintenance_status": False, "maintenance_reason": None}}
        logger.info(f"maintenance json data is empty, setting new default data {json_data}")
        MAINTENANCE.update_data(json_data)
    return json_data["maintenance"]


@admin_group_commands_router.message(Command("ref_analytics"))
async def bot_ref_analytics_command_handler(message: Message) -> None:
    """Send the json analytics on referal start messages"""
    await message.answer_document(
        document=FSInputFile(START_MESSAGE_ANALYTICS.file_path),
    )


@admin_group_commands_router.message(Command("bot_status"))
async def bot_status_command_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Ç–µ—Ö –æ–±—Å"""

    data = _get_maintenance_data()
    text = "<b><i>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</i></b>\n"
    if data["maintenance_status"]:
        text += "\nüü° <b>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.</b>\n"
        maintenance_text = (
            data["maintenance_reason"] if data["maintenance_reason"] else "üõ† –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
        )
        text += f"\n<b>–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<pre>{maintenance_text}</pre>"
    else:
        text += "\nüü¢ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.</b>"
    await message.answer(text)


@admin_group_commands_router.message(Command("on_maintenance"))
async def on_maintenance_command_handler(message: Message, command: CommandObject) -> None:
    data = _get_maintenance_data()
    if command.args is None:
        maintenance_text = None
        text = "‚úì –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ <b>–≤–∫–ª—é—á–µ–Ω–æ</b> —Å <u>–¥–µ—Ñ–æ–ª—Ç–Ω—ã–º</u> —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        maintenance_text = command.args
        text = "‚úì –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ <b>–≤–∫–ª—é—á–µ–Ω–æ</b> —Å <u>—É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏</u> —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    data["maintenance_status"] = True
    data["maintenance_reason"] = maintenance_text
    MAINTENANCE.update_data({"maintenance": data})
    await message.reply(text)


@admin_group_commands_router.message(Command("off_maintenance"))
async def off_maintenance_command_handler(message: Message) -> None:
    data = _get_maintenance_data()
    if data["maintenance_status"]:
        data["maintenance_status"] = False
        data["maintenance_reason"] = None
        MAINTENANCE.update_data({"maintenance": data})
        await message.reply("‚úì –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ <b>–≤—ã–∫–ª—é—á–µ–Ω–æ</b>")
    else:
        await message.reply("‚úó –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏—Ç–∞–∫ <b>–Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ</b>.")
