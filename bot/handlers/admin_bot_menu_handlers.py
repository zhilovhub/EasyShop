import json
import os
import string
from random import sample
from magic_filter import F

from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext

from bot.main import bot, db_engine
from bot.config import logger
from bot.keyboards import *
from bot.states.states import States
from bot.handlers.routers import admin_bot_menu_router
from bot.utils.custom_bot_launching import start_custom_bot, stop_custom_bot

from database.models.order_model import OrderSchema
from database.models.product_model import ProductWithoutId

product_db = db_engine.get_product_db()
bot_db = db_engine.get_bot_dao()


@admin_bot_menu_router.message(States.BOT_MENU, F.photo)
async def bot_menu_photo_handler(message: Message, state: FSMContext):
    state_data = await state.get_data()
    photo_file_id = message.photo[-1].file_id

    if message.caption is None:
        return await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏ –µ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ:"
                                    "\n\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö")

    params = message.caption.strip().split('\n')
    filename = "".join(sample(string.ascii_letters + string.digits, k=5)) + ".jpg"

    if len(params) != 2:
        return await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏ –µ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ:"
                                    "\n\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö")
    if params[-1].isdigit():
        price = int(params[-1])
    else:
        return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <b>—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º</b>")

    await bot.download(photo_file_id, destination=f"{os.getenv('FILES_PATH')}{filename}")

    new_product = ProductWithoutId(bot_id=state_data['bot_id'],
                                   name=params[0],
                                   description="",
                                   price=price,
                                   picture=filename)
    await db_engine.get_product_db().add_product(new_product)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë")


@admin_bot_menu_router.message(States.BOT_MENU)
async def bot_menu_handler(message: Message, state: FSMContext):
    state_data = await state.get_data()

    match message.text:
        case "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, "
                                 "–∫–æ–≥–¥–∞ –æ–Ω–∏ —Ç–≤–æ–µ–º—É –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç /start", reply_markup=get_back_keyboard())
            await state.set_state(States.EDITING_START_MESSAGE)
            await state.set_data(state_data)
        case "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Ç—ã—á–∫–∞":
            await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "
                                 "–Ω–∞ –∏—Ö –ª—é–±—ã–µ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=get_back_keyboard())
            await state.set_state(States.EDITING_DEFAULT_MESSAGE)
            await state.set_data(state_data)
        case "–ú–∞–≥–∞–∑–∏–Ω":
            pass  # should be pass, it's nice
        case "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤":
            products = await db_engine.get_product_db().get_all_products(state_data["bot_id"])
            if not products:
                await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—É—Å—Ç")
            else:
                await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üëá\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏ –Ω–∞ —Ç–µ–≥ —Ä—è–¥–æ–º —Å –Ω–∏–º")
                for product in products:
                    await message.answer_photo(
                        photo=FSInputFile(os.getenv('FILES_PATH') + product.picture),
                        caption=f"<b>{product.name}</b>\n\n"
                                f"–¶–µ–Ω–∞: <b>{float(product.price)}‚ÇΩ</b>",
                        reply_markup=get_inline_delete_button(product.id))
        case "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
            await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏ –µ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ:"
                                 "\n\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö")
        case "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
            await start_custom_bot(state_data['bot_id'])
            await message.answer("–¢–≤–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
        case "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞":
            await stop_custom_bot(state_data['bot_id'])
            await message.answer("–¢–≤–æ–π –±–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
        case "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞":
            await message.answer("–ë–æ—Ç —É–¥–∞–ª–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–π –±–∞–∑–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.\n"
                                 "–ù–∞–ø–∏—à–∏ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_back_keyboard())
            await state.set_state(States.DELETE_BOT)
            await state.set_data(state_data)
        case _:
            await message.answer(
                "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üëá",
                reply_markup=get_bot_menu_keyboard(state_data["bot_id"])
            )


async def send_new_order_notify(order: OrderSchema, user_id: int):
    order_user_data = await bot.get_chat(order.from_user)
    products = [(await product_db.get_product(product_id), product_count)
                for product_id, product_count in order.products.items()]

    await bot.send_message(user_id, f"–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —É —Ç–µ–±—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ üëá")
    await bot.send_message(
        user_id, order.convert_to_notification_text(
            products,
            "@" + order_user_data.username if order_user_data.username else order_user_data.full_name,
            True
        )
    )


async def send_order_change_status_notify(order: OrderSchema):
    user_bot = await bot_db.get_bot(order.bot_id)
    text = f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑ <b>#{order.id}</b>\n<b>{order.status}</b>"
    await bot.send_message(user_bot.created_by, text)
    await bot.send_message(order.from_user, text)


@admin_bot_menu_router.message(F.web_app_data)
async def process_web_app_request(event: Message):
    user_id = event.from_user.id
    try:
        data = json.loads(event.web_app_data.data)
        logger.info(f"receive web app data: {data}")

        data["from_user"] = user_id
        data["status"] = "backlog"

        order = OrderSchema(**data)

        logger.info(f"order with id #{order.id} created")
    except Exception:
        logger.warning("error while creating order", exc_info=True)
        return await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    try:
        await send_new_order_notify(order, user_id)
    except Exception as ex:
        logger.warning("error while sending test order notification", exc_info=True)
