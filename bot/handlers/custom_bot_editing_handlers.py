import re

from aiogram import Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

from bot.main import bot
from bot.utils import MessageTexts
from bot.states.states import States
from bot.handlers.routers import custom_bot_editing_router
from bot.utils.send_instructions import greetings_message
from bot.keyboards.main_menu_keyboards import (
    ReplyBotMenuKeyboard,
    ReplyBackBotMenuKeyboard,
    SelectHexColorWebAppInlineKeyboard,
)
from common_utils.bot_utils import create_bot_options

from common_utils.themes import (
    THEME_EXAMPLE_PRESET_DARK,
    THEME_EXAMPLE_PRESET_LIGHT,
    ThemeParamsSchema,
    is_valid_hex_code,
)
from common_utils.config import common_settings
from common_utils.invoice import create_invoice_params
from common_utils.keyboards.keyboards import (
    InlineBotEditOrderOptionKeyboard,
    InlineBotEditOrderOptionsKeyboard,
    InlineBotMenuKeyboard,
    InlineBotSettingsMenuKeyboard,
    InlineEditOrderChooseOptionKeyboard,
    InlineEditOrderOptionTypeKeyboard,
    InlinePaymentSettingsKeyboard,
    InlineCurrencySelectKeyboard,
    InlinePaymentSetupKeyboard,
    InlineThemeSettingsMenuKeyboard,
    InlinePresetsForThemesMenuKeyboard,
    InlineEditThemeColorMenuKeyboard,
)
from common_utils.keyboards.remove_keyboard import OurReplyKeyboardRemove

from database.config import bot_db, option_db, order_option_db, order_choose_option_db
from database.models.bot_model import BotPaymentTypeValues
from database.models.option_model import CurrencyCodesValues, CurrencySymbolsValues, OptionNotFoundError
from database.models.order_option_model import (
    OrderOptionNotFoundError,
    OrderOptionSchemaWithoutId,
    OrderOptionTypeValues,
)
from database.models.order_choose_option_model import OrderChooseOptionSchemaWithoutId

from logs.config import logger


@custom_bot_editing_router.callback_query(
    lambda query: InlineBotEditOrderOptionsKeyboard.callback_validator(query.data)
)
async def manage_order_options(query: CallbackQuery, state: FSMContext):
    callback_data = InlineBotEditOrderOptionsKeyboard.Callback.model_validate_json(query.data)

    custom_bot = await bot_db.get_bot(callback_data.bot_id)
    match callback_data.a:
        case callback_data.ActionEnum.BACK_TO_BOT_MENU:
            await query.message.edit_text(
                MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(callback_data.bot_id),
            )
        case callback_data.ActionEnum.ADD_ORDER_OPTION:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏: ", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await query.answer()
            await state.set_state(States.WAITING_FOR_NEW_ORDER_OPTION_TEXT)
            await state.set_data({"bot_id": callback_data.bot_id})
        case callback_data.ActionEnum.EDIT_ORDER_OPTION:
            try:
                oo = await order_option_db.get_order_option(callback_data.order_option_id)
            except OrderOptionNotFoundError:
                await query.answer("–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ —ç—Ç—É –æ–ø—Ü–∏—é", show_alert=True)
                await query.message.delete()
                return
            await query.message.edit_text(
                **MessageTexts.generate_order_option_info(oo),
                reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                    custom_bot.bot_id, callback_data.order_option_id
                ),
            )
            await query.answer()


@custom_bot_editing_router.callback_query(lambda query: InlineThemeSettingsMenuKeyboard.callback_validator(query.data))
async def customization_manage_callback_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    callback_data = InlineThemeSettingsMenuKeyboard.Callback.model_validate_json(query.data)

    bot_id = callback_data.bot_id
    user_bot = await bot_db.get_bot(bot_id)
    custom_bot_data = await Bot(token=user_bot.token).get_me()

    match callback_data.a:
        case callback_data.ActionEnum.CHOOSE_PRESET:
            await query.message.edit_text(
                f"üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –±–æ—Ç–∞ @{custom_bot_data.username}.",
                reply_markup=InlinePresetsForThemesMenuKeyboard.get_keyboard(bot_id),
            )
        case callback_data.ActionEnum.CUSTOM_COLORS:
            await query.message.edit_text(
                f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–≤–µ—Ç–∞ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è " f"–±–æ—Ç–∞ @{custom_bot_data.username}.",
                reply_markup=InlineEditThemeColorMenuKeyboard.get_keyboard(bot_id),
            )
        case callback_data.ActionEnum.BACK_TO_BOT_SETTINGS:
            return await query.message.edit_text(
                MessageTexts.BOT_MENU_MESSAGE.value.format(custom_bot_data.username),
                reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(callback_data.bot_id),
            )


@custom_bot_editing_router.callback_query(
    lambda query: InlinePresetsForThemesMenuKeyboard.callback_validator(query.data)
)
async def presets_select_callback_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    callback_data = InlinePresetsForThemesMenuKeyboard.Callback.model_validate_json(query.data)

    bot_id = callback_data.bot_id
    user_bot = await bot_db.get_bot(bot_id)
    custom_bot_data = await Bot(token=user_bot.token).get_me()
    bot_options = await option_db.get_option(user_bot.options_id)

    match callback_data.a:
        case callback_data.ActionEnum.TELEGRAM_THEME:
            bot_options.theme_params = ThemeParamsSchema()
            await option_db.update_option(bot_options)
            await query.answer("–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.", show_alert=True)
        case callback_data.ActionEnum.LIGHT_THEME:
            bot_options.theme_params = THEME_EXAMPLE_PRESET_LIGHT
            await option_db.update_option(bot_options)
            await query.answer("–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–ª—É—é.", show_alert=True)
        case callback_data.ActionEnum.DARK_THEME:
            bot_options.theme_params = THEME_EXAMPLE_PRESET_DARK
            await option_db.update_option(bot_options)
            await query.answer("–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ç–µ–º–Ω—É—é.", show_alert=True)
        case callback_data.ActionEnum.BACK_TO_CUSTOMIZATION_SETTINGS:
            await query.message.edit_text(
                f"üé® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ @{custom_bot_data.username}.",
                reply_markup=InlineThemeSettingsMenuKeyboard.get_keyboard(bot_id),
            )


@custom_bot_editing_router.callback_query(lambda query: InlineEditThemeColorMenuKeyboard.callback_validator(query.data))
async def colors_edit_callback_handler(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ü–≤–µ—Ç–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    callback_data = InlineEditThemeColorMenuKeyboard.Callback.model_validate_json(query.data)

    bot_id = callback_data.bot_id
    user_bot = await bot_db.get_bot(bot_id)
    custom_bot_data = await Bot(token=user_bot.token).get_me()
    state_data = await state.get_data()

    match callback_data.a:
        case callback_data.ActionEnum.BG_COLOR:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #FFFFFF "
                "(–Ω–∞–ø–∏—à–∏—Ç–µ telegram - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞), "
                "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            await state.set_state(States.EDITING_CUSTOM_COLOR)
            state_data["color_param"] = "bg_color"
            await state.set_data(state_data)
        case callback_data.ActionEnum.SECONDARY_BG:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #FFFFFF "
                "(–Ω–∞–ø–∏—à–∏—Ç–µ telegram - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞), "
                "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            await state.set_state(States.EDITING_CUSTOM_COLOR)
            state_data["color_param"] = "secondary_bg_color"
            await state.set_data(state_data)
        case callback_data.ActionEnum.TEXT_COLOR:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #FFFFFF "
                "(–Ω–∞–ø–∏—à–∏—Ç–µ telegram - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞), "
                "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            await state.set_state(States.EDITING_CUSTOM_COLOR)
            state_data["color_param"] = "text_color"
            await state.set_data(state_data)
        case callback_data.ActionEnum.BUTTON_COLOR:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #FFFFFF "
                "(–Ω–∞–ø–∏—à–∏—Ç–µ telegram - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞), "
                "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            await state.set_state(States.EDITING_CUSTOM_COLOR)
            state_data["color_param"] = "button_color"
            await state.set_data(state_data)
        case callback_data.ActionEnum.BUTTON_TEXT_COLOR:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #FFFFFF "
                "(–Ω–∞–ø–∏—à–∏—Ç–µ telegram - –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞), "
                "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞: ",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            await state.set_state(States.EDITING_CUSTOM_COLOR)
            state_data["color_param"] = "button_text_color"
            await state.set_data(state_data)
        case callback_data.ActionEnum.BACK_TO_CUSTOMIZATION_SETTINGS:
            return await query.message.edit_text(
                f"üé® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ @{custom_bot_data.username}.",
                reply_markup=InlineThemeSettingsMenuKeyboard.get_keyboard(bot_id),
            )

    await query.message.answer(
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞ –Ω–∞ –ø–∞–ª–∏—Ç—Ä–µ.", reply_markup=SelectHexColorWebAppInlineKeyboard.get_keyboard()
    )


@custom_bot_editing_router.callback_query(lambda query: InlineBotEditOrderOptionKeyboard.callback_validator(query.data))
async def manage_order_option(query: CallbackQuery, state: FSMContext):
    callback_data = InlineBotEditOrderOptionKeyboard.Callback.model_validate_json(query.data)

    custom_bot = await bot_db.get_bot(callback_data.bot_id)

    order_options = await order_option_db.get_all_order_options(custom_bot.bot_id)

    sorted_oo = sorted(order_options, key=lambda x: x.position_index)

    try:
        order_option = await order_option_db.get_order_option(callback_data.order_option_id)
    except OrderOptionNotFoundError:
        await query.answer("–≠—Ç–∞ –æ–ø—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        await query.message.delete()
        return

    match callback_data.a:
        case callback_data.ActionEnum.BACK_TO_ORDER_OPTIONS:
            await query.message.edit_text(
                **MessageTexts.generate_order_options_info(order_options),
                reply_markup=await InlineBotEditOrderOptionsKeyboard.get_keyboard(custom_bot.bot_id),
            )

        case callback_data.ActionEnum.EDIT_REQUIRED_STATUS:
            order_option.required = not order_option.required
            await order_option_db.update_order_option(order_option)
            await query.message.edit_reply_markup(
                reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                    custom_bot.bot_id, callback_data.order_option_id
                )
            )

        case callback_data.ActionEnum.EDIT_EMOJI:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –∫ —ç—Ç–æ–π –æ–ø—Ü–∏–∏: ", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await query.answer()
            await state.set_state(States.WAITING_FOR_ORDER_OPTION_EMOJI)
            await state.set_data({"bot_id": callback_data.bot_id, "order_option_id": callback_data.order_option_id})

        case callback_data.ActionEnum.EDIT_OPTION_NAME:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫ —ç—Ç–æ–π –æ–ø—Ü–∏–∏: ", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await query.answer()
            await state.set_state(States.WAITING_FOR_ORDER_OPTION_TEXT)
            await state.set_data({"bot_id": callback_data.bot_id, "order_option_id": callback_data.order_option_id})
        case callback_data.ActionEnum.EDIT_POSITION_INDEX:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∫ —ç—Ç–æ–π –æ–ø—Ü–∏–∏: ", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await query.answer()
            await state.set_state(States.WAITING_FOR_ORDER_OPTION_POSITION)
            await state.set_data({"bot_id": callback_data.bot_id, "order_option_id": callback_data.order_option_id})

        case callback_data.ActionEnum.EDIT_ORDER_OPTION_TYPE:
            await query.message.edit_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.order_option_id
                ),
            )

        case callback_data.ActionEnum.DELETE_ORDER_OPTION:
            await order_option_db.delete_order_option(order_option.id)
            sorted_oo.remove(order_option)
            for index, option in enumerate(sorted_oo):
                option.position_index = index + 1
                await order_option_db.update_order_option(option)
            await query.answer("–û–ø—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            await query.message.edit_text(
                **MessageTexts.generate_order_options_info(sorted_oo),
                reply_markup=await InlineBotEditOrderOptionsKeyboard.get_keyboard(custom_bot.bot_id),
            )


@custom_bot_editing_router.message(States.WAITING_FOR_ORDER_OPTION_POSITION)
async def edit_order_option_position(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])
        order_option = await order_option_db.get_order_option(state_data["order_option_id"])
        order_options = await order_option_db.get_all_order_options(custom_bot.bot_id)
        sorted_oo = sorted(order_options, key=lambda x: x.position_index)
        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    **MessageTexts.generate_order_option_info(order_option),
                    reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                try:
                    index = int(message.text)
                except ValueError:
                    return await message.answer("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ  –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
                if index <= 0:
                    return await message.answer("–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                if index > sorted_oo[-1].position_index:
                    return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏–π")
                sorted_oo.remove(order_option)
                sorted_oo.insert(index - 1, order_option)
                for i, option in enumerate(sorted_oo):
                    option.position_index = i + 1
                    await order_option_db.update_order_option(option)
                await message.answer("–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    **MessageTexts.generate_order_option_info(order_option),
                    reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)

    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.WAITING_FOR_ORDER_OPTION_TEXT)
async def edit_order_option_name(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])
        order_option = await order_option_db.get_order_option(state_data["order_option_id"])
        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    **MessageTexts.generate_order_option_info(order_option),
                    reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                order_option.option_name = message.text
                await order_option_db.update_order_option(order_option)
                await message.answer("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    **MessageTexts.generate_order_option_info(order_option),
                    reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)

    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.WAITING_FOR_ORDER_OPTION_EMOJI)
async def edit_order_option_emoji(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])
        order_option = await order_option_db.get_order_option(state_data["order_option_id"])
        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    **MessageTexts.generate_order_option_info(order_option),
                    reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                emoji_pattern = re.compile(
                    r"^[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-"
                    r"\U0001F6FF\U0001F700-\U0001F77F\U0001F780-\U0001F7FF\U0001F800-"
                    r"\U0001F8FF\U0001F900-\U0001F9FF\U0001FA00-\U0001FA6F\U0001FA70-"
                    r"\U0001FAFF\U00002702-\U000027B0\U000024C2-\U0001F251]$"
                )
                if emoji_pattern.match(message.text):
                    order_option.emoji = message.text
                    await order_option_db.update_order_option(order_option)
                    await message.answer("–ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                    await message.answer(
                        **MessageTexts.generate_order_option_info(order_option),
                        reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                            custom_bot.bot_id, order_option.id
                        ),
                    )
                    await state.set_state(States.BOT_MENU)
                    await state.set_data(state_data)
                else:
                    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏")

    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.callback_query(lambda query: InlinePaymentSettingsKeyboard.callback_validator(query.data))
async def manage_payment_settings(query: CallbackQuery, state: FSMContext):
    callback_data = InlinePaymentSettingsKeyboard.Callback.model_validate_json(query.data)

    custom_bot = await bot_db.get_bot(callback_data.bot_id)
    custom_bot_data = await Bot(custom_bot.token).get_me()
    custom_bot_options = await option_db.get_option(custom_bot.options_id)

    # check if currency code is still xtr, but stars is not selected
    if (
        custom_bot.payment_type != BotPaymentTypeValues.STARS
        and custom_bot_options.currency_code == CurrencyCodesValues.TELEGRAM_STARS
    ):
        custom_bot_options.currency_code = CurrencyCodesValues.RUSSIAN_RUBLE
        custom_bot_options.currency_symbol = CurrencySymbolsValues.RUSSIAN_RUBLE
        await option_db.update_option(custom_bot_options)

    match callback_data.a:
        case callback_data.ActionEnum.MANUAL_METHOD:
            custom_bot.payment_type = BotPaymentTypeValues.MANUAL
            await bot_db.update_bot(custom_bot)
            await query.message.edit_text(
                MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.payment_type
                ),
            )
            return await query.answer("ü§ù –í—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", show_alert=True)
        case callback_data.ActionEnum.BOT_EDIT_POST_ORDER_MESSAGE:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–∞—à–µ–≥–æ –±–æ—Ç–∞ "
                "–ø–æ—Å–ª–µ <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–º–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
                "‚ùóÔ∏è<b>–°–æ–≤–µ—Ç</b>: –≤–≤–µ–¥–∏—Ç–µ —Ç—É–¥–∞, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º –¥–µ–Ω—å–≥–∏",
                reply_markup=ReplyBackBotMenuKeyboard.get_keyboard(),
            )
            await query.answer()
            state_data = await state.get_data()
            await state.set_state(States.EDITING_POST_ORDER_MESSAGE)
            await state.set_data(state_data)
        case callback_data.ActionEnum.TG_PROVIDER:
            custom_bot.payment_type = BotPaymentTypeValues.TG_PROVIDER
            await bot_db.update_bot(custom_bot)
            await query.message.edit_text(
                MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.payment_type
                ),
            )
            return await query.answer(
                "üì± –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.\n\n"
                "‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å provider token –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–∫–∏.",
                show_alert=True,
            )
        case callback_data.ActionEnum.STARS:
            custom_bot.payment_type = BotPaymentTypeValues.STARS
            custom_bot_options.currency_code = CurrencyCodesValues.TELEGRAM_STARS
            custom_bot_options.currency_symbol = CurrencySymbolsValues.TELEGRAM_STARS
            await bot_db.update_bot(custom_bot)
            await option_db.update_option(custom_bot_options)
            await query.message.edit_text(
                MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.payment_type
                ),
            )
            return await query.answer("‚≠êÔ∏è –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥—ã.", show_alert=True)
        case callback_data.ActionEnum.SELECT_CURRENCY:
            if custom_bot.payment_type == BotPaymentTypeValues.STARS:
                return await query.answer(
                    "‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–ª—é—Ç—É.", show_alert=True
                )
            return await query.message.edit_text(
                MessageTexts.CURRENCY_SELECT_TEXT.value.format(custom_bot_data.username),
                reply_markup=await InlineCurrencySelectKeyboard.get_keyboard(
                    callback_data.bot_id, custom_bot_options.currency_code
                ),
            )
        case callback_data.ActionEnum.TG_PROVIDER_SETUP | callback_data.ActionEnum.STARS_SETUP:
            if callback_data.a == callback_data.ActionEnum.STARS_SETUP:
                stars = True
            else:
                stars = False
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.BACK_TO_BOT_MENU:
            if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER and not custom_bot.provider_token:
                custom_bot.payment_type = BotPaymentTypeValues.MANUAL
                await bot_db.update_bot(custom_bot)
                await query.answer(
                    "‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ provider token –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
                    "\n\n–ë–µ–∑ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
                    "\n\n‚Ü©Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—é –æ–ø–ª–∞—Ç—É –Ω–∞ —Ä—É—á–Ω—É—é.",
                    show_alert=True,
                )
                return query.message.edit_reply_markup(
                    reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                        custom_bot.bot_id, custom_bot.payment_type
                    )
                )
            return await query.message.edit_text(
                MessageTexts.BOT_MENU_MESSAGE.value.format(custom_bot_data.username),
                reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(callback_data.bot_id),
            )


async def _send_provider_token_instructions(user_id: int):
    media = [
        InputMediaPhoto(
            media=FSInputFile(path=common_settings.RESOURCES_PATH.format("provider_token_1.jpg")),
            caption=MessageTexts.PROVIDER_TOKEN_INSTRUCTION_MESSAGE.value,
        ),
        InputMediaPhoto(
            media=FSInputFile(path=common_settings.RESOURCES_PATH.format("provider_token_2.jpg")),
        ),
        InputMediaPhoto(
            media=FSInputFile(path=common_settings.RESOURCES_PATH.format("provider_token_3.jpg")),
        ),
    ]
    await bot.send_media_group(user_id, media)


@custom_bot_editing_router.callback_query(lambda query: InlinePaymentSetupKeyboard.callback_validator(query.data))
async def manage_payment_setup(query: CallbackQuery, state: FSMContext):
    callback_data = InlinePaymentSetupKeyboard.Callback.model_validate_json(query.data)

    custom_bot = await bot_db.get_bot(callback_data.bot_id)
    custom_bot_tg = Bot(custom_bot.token)
    custom_bot_data = await custom_bot_tg.get_me()
    custom_bot_options = await option_db.get_option(custom_bot.options_id)

    if custom_bot.payment_type == BotPaymentTypeValues.STARS:
        stars = True
    else:
        stars = False

    match callback_data.a:
        case callback_data.ActionEnum.NAME:
            custom_bot_options.request_name_in_payment = not custom_bot_options.request_name_in_payment
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.EMAIL:
            custom_bot_options.request_email_in_payment = not custom_bot_options.request_email_in_payment
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.PHONE:
            custom_bot_options.request_phone_in_payment = not custom_bot_options.request_phone_in_payment
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.SHIPPING:
            custom_bot_options.request_address_in_payment = not custom_bot_options.request_address_in_payment
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.PHOTO:
            custom_bot_options.show_photo_in_payment = not custom_bot_options.show_photo_in_payment
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.WEBVIEW:
            custom_bot_options.show_payment_in_webview = not custom_bot_options.show_payment_in_webview
            await option_db.update_option(custom_bot_options)
            return await query.message.edit_text(
                MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.options_id, stars
                ),
            )
        case callback_data.ActionEnum.SET_PROVIDER_TOKEN:
            await _send_provider_token_instructions(query.from_user.id)
            state_data = await state.get_data()
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ Provider Token: ", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard())
            await state.set_state(States.SETTING_PROVIDER_TOKEN)
            await state.set_data(state_data)
        case callback_data.ActionEnum.SHOW_PAYMENT:
            if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER and not custom_bot.provider_token:
                return await query.answer(
                    "‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ provider token –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
                    "\n\n–ë–µ–∑ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
                    show_alert=True,
                )
            if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER:
                await query.message.answer(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:"
                    "\n\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n<code>4242 4242 4242 4242</code>"
                    "\n\nüìÜ –ì–æ–¥–Ω–∞ –¥–æ:\n<code>12/30</code>"
                    "\n\n*Ô∏è‚É£ CVC:\n<code>111</code>"
                )
            try:
                await query.message.answer_invoice(
                    **(
                        await create_invoice_params(
                            custom_bot.bot_id,
                            query.from_user.id,
                            order_items={},
                            test=True,
                            order_id="TEST",
                        )
                    )
                )
            except TelegramBadRequest as ex:
                if "CURRENCY_INVALID" in str(ex):
                    return await query.answer(
                        f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
                        f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–∞—è –í–∞–º–∏ –≤–∞–ª—é—Ç–∞ ({custom_bot_options.currency_symbol.value}) "
                        f"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.",
                        show_alert=True,
                    )
                raise ex
            await query.answer()
        case callback_data.ActionEnum.SEND_TO_BOT:
            if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER and not custom_bot.provider_token:
                return await query.answer(
                    "‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ provider token –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
                    "\n\n–ë–µ–∑ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
                    show_alert=True,
                )
            try:
                await custom_bot_tg.send_message(
                    chat_id=query.from_user.id, text=MessageTexts.SEND_PAYMENT_SHOW_TO_CUSTOM_BOT.value
                )
                await custom_bot_tg.send_invoice(
                    chat_id=query.from_user.id,
                    **(
                        await create_invoice_params(
                            bot_id=custom_bot.bot_id,
                            user_id=query.from_user.id,
                            order_items={},
                            test=True,
                            user_bot_test=True,
                            order_id="TEST",
                        )
                    ),
                )
                if "LIVE" in custom_bot.provider_token:
                    await custom_bot_tg.send_message(
                        chat_id=query.from_user.id,
                        text="‚ö†Ô∏è –£ –í–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–∞–±–æ—á–∏–π provider token, –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω–æ —Å–ø–∏—Å–∞–Ω—ã.",
                    )
                else:
                    if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER:
                        await query.message.answer(
                            "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:"
                            "\n\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n<code>4242 4242 4242 4242</code>"
                            "\n\nüìÜ –ì–æ–¥–Ω–∞ –¥–æ:\n<code>12/30</code>"
                            "\n\n*Ô∏è‚É£ CVC:\n<code>111</code>"
                        )
                if custom_bot.payment_type == BotPaymentTypeValues.STARS:
                    await custom_bot_tg.send_message(
                        chat_id=query.from_user.id,
                        text="‚ö†Ô∏è –£ –í–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏, –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω–æ —Å–ø–∏—Å–∞–Ω—ã "
                        "–ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞..",
                    )
                await query.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –í–∞—à–µ–≥–æ –±–æ—Ç–∞.")
            except TelegramBadRequest as ex:
                if "chat not found" in str(ex):
                    return await query.answer(
                        "‚ö†Ô∏è –í—ã –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª–∏ —Å–≤–æ–µ–º—É –±–æ—Ç—É." "\n\n–û–Ω –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º.",
                        show_alert=True,
                    )
                elif "CURRENCY_INVALID" in str(ex):
                    return await query.answer(
                        f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–∞—è –í–∞–º–∏ –≤–∞–ª—é—Ç–∞ ({custom_bot_options.currency_symbol.value}) "
                        f"–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º, —á–µ–π —Ç–æ–∫–µ–Ω –í—ã —É–∫–∞–∑–∞–ª–∏.",
                        show_alert=True,
                    )
                elif "PAYMENT_PROVIDER_INVALID" in str(ex):
                    return await query.answer(
                        "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ Provider Token –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç."
                        "\n\n–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑, "
                        "–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        show_alert=True,
                    )
                else:
                    raise ex
        case callback_data.ActionEnum.BACK_TO_PAYMENT_MENU:
            await query.message.edit_text(
                MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.payment_type
                ),
            )


@custom_bot_editing_router.callback_query(lambda query: InlineCurrencySelectKeyboard.callback_validator(query.data))
async def select_currency_settings(query: CallbackQuery):
    callback_data = InlineCurrencySelectKeyboard.Callback.model_validate_json(query.data)

    custom_bot = await bot_db.get_bot(callback_data.bot_id)
    custom_bot_data = await Bot(custom_bot.token).get_me()
    custom_bot_options = await option_db.get_option(custom_bot.options_id)

    if custom_bot.payment_type == BotPaymentTypeValues.STARS:
        await query.answer("‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–ª—é—Ç—É.", show_alert=True)
        return await query.message.edit_text(
            MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
            reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(custom_bot.bot_id, custom_bot.payment_type),
        )

    if custom_bot.payment_type == BotPaymentTypeValues.TG_PROVIDER:
        add_text = (
            "\n\n‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø–ª–∞—Ç–µ–∂ –∫–Ω–æ–ø–∫–æ–π"
            "\n¬´üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –í–∞—à–µ–≥–æ –±–æ—Ç–∞¬ª\n–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
        )
    else:
        add_text = ""

    match callback_data.a:
        case callback_data.ActionEnum.RUB:
            custom_bot_options.currency_code = CurrencyCodesValues.RUSSIAN_RUBLE
            custom_bot_options.currency_symbol = CurrencySymbolsValues.RUSSIAN_RUBLE
            await option_db.update_option(custom_bot_options)
            await query.answer(
                f"üí± –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ({CurrencySymbolsValues.RUSSIAN_RUBLE.value}) "
                f"\n–≤—ã–±—Ä–∞–Ω –≤–∞–ª—é—Ç–æ–π –º–∞–≥–∞–∑–∏–Ω–∞.{add_text}",
                show_alert=True,
            )
            return await query.message.edit_text(
                MessageTexts.CURRENCY_SELECT_TEXT.value.format(custom_bot_data.username),
                reply_markup=await InlineCurrencySelectKeyboard.get_keyboard(
                    callback_data.bot_id, custom_bot_options.currency_code
                ),
            )
        case callback_data.ActionEnum.EUR:
            custom_bot_options.currency_code = CurrencyCodesValues.EURO
            custom_bot_options.currency_symbol = CurrencySymbolsValues.EURO
            await option_db.update_option(custom_bot_options)
            await query.answer(
                f"üí± –ï–≤—Ä–æ ({CurrencySymbolsValues.EURO.value}) " f"\n–≤—ã–±—Ä–∞–Ω –≤–∞–ª—é—Ç–æ–π –º–∞–≥–∞–∑–∏–Ω–∞.{add_text}",
                show_alert=True,
            )
            return await query.message.edit_text(
                MessageTexts.CURRENCY_SELECT_TEXT.value.format(custom_bot_data.username),
                reply_markup=await InlineCurrencySelectKeyboard.get_keyboard(
                    callback_data.bot_id, custom_bot_options.currency_code
                ),
            )
        case callback_data.ActionEnum.USD:
            custom_bot_options.currency_code = CurrencyCodesValues.US_DOLLAR
            custom_bot_options.currency_symbol = CurrencySymbolsValues.US_DOLLAR
            await option_db.update_option(custom_bot_options)
            await query.answer(
                f"üí± –î–æ–ª–ª–∞—Ä –°–®–ê ({CurrencySymbolsValues.US_DOLLAR.value}) " f"\n–≤—ã–±—Ä–∞–Ω –≤–∞–ª—é—Ç–æ–π –º–∞–≥–∞–∑–∏–Ω–∞.{add_text}",
                show_alert=True,
            )
            return await query.message.edit_text(
                MessageTexts.CURRENCY_SELECT_TEXT.value.format(custom_bot_data.username),
                reply_markup=await InlineCurrencySelectKeyboard.get_keyboard(
                    callback_data.bot_id, custom_bot_options.currency_code
                ),
            )
        case callback_data.ActionEnum.ISL:
            custom_bot_options.currency_code = CurrencyCodesValues.ISRAELI_SHEQEL
            custom_bot_options.currency_symbol = CurrencySymbolsValues.ISRAELI_SHEQEL
            await option_db.update_option(custom_bot_options)
            await query.answer(
                f"üí± –ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —à–µ–∫–µ–ª—å ({CurrencySymbolsValues.ISRAELI_SHEQEL.value}) "
                f"\n–≤—ã–±—Ä–∞–Ω –≤–∞–ª—é—Ç–æ–π –º–∞–≥–∞–∑–∏–Ω–∞.{add_text}",
                show_alert=True,
            )
            return await query.message.edit_text(
                MessageTexts.CURRENCY_SELECT_TEXT.value.format(custom_bot_data.username),
                reply_markup=await InlineCurrencySelectKeyboard.get_keyboard(
                    callback_data.bot_id, custom_bot_options.currency_code
                ),
            )
        case callback_data.ActionEnum.BACK_TO_PAYMENT_MENU:
            await query.message.edit_text(
                MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                    custom_bot.bot_id, custom_bot.payment_type
                ),
            )


@custom_bot_editing_router.callback_query(
    lambda query: InlineEditOrderOptionTypeKeyboard.callback_validator(query.data)
)
async def edit_order_option_type_menu(query: CallbackQuery, state: FSMContext):
    callback_data = InlineEditOrderOptionTypeKeyboard.Callback.model_validate_json(query.data)

    try:
        order_option = await order_option_db.get_order_option(callback_data.opt_id)
    except OrderOptionNotFoundError:
        await query.answer("–≠—Ç–∞ –æ–ø—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        await query.message.delete()
        return

    match callback_data.a:
        case callback_data.ActionEnum.EDIT_OPTION_TYPE:
            if order_option.option_type.value == OrderOptionTypeValues.TEXT.value:
                order_option.option_type = OrderOptionTypeValues.CHOOSE
            else:
                order_option.option_type = OrderOptionTypeValues.TEXT
            await order_option_db.update_order_option(order_option)
            await query.message.edit_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.opt_id
                ),
            )

        case callback_data.ActionEnum.ADD_CHOOSE_OPTION:
            if order_option.option_type.value == OrderOptionTypeValues.TEXT.value:
                return await query.answer("–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await query.answer()
            await state.set_state(States.WAITING_FOR_NEW_ORDER_CHOOSE_OPTION_TEXT)
            await state.set_data({"bot_id": callback_data.bot_id, "order_option_id": callback_data.opt_id})

        case callback_data.ActionEnum.EDIT_CHOOSE_OPTION:
            if order_option.option_type.value == OrderOptionTypeValues.TEXT.value:
                return await query.answer("–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)
            choose_option = await order_choose_option_db.get_choose_option(callback_data.choose_id)
            await query.message.edit_text(
                f"–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ {choose_option.choose_option_name}",
                reply_markup=InlineEditOrderChooseOptionKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.opt_id, callback_data.choose_id
                ),
            )

        case callback_data.ActionEnum.BACK_TO_ORDER_OPTION:
            await query.message.edit_text(
                **MessageTexts.generate_order_option_info(order_option),
                reply_markup=await InlineBotEditOrderOptionKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.opt_id
                ),
            )


@custom_bot_editing_router.callback_query(
    lambda query: InlineEditOrderChooseOptionKeyboard.callback_validator(query.data)
)
async def manage_order_choose_option(query: CallbackQuery, state: FSMContext):
    callback_data = InlineEditOrderChooseOptionKeyboard.Callback.model_validate_json(query.data)

    try:
        order_option = await order_option_db.get_order_option(callback_data.opt_id)
    except OrderOptionNotFoundError:
        await query.answer("–≠—Ç–∞ –æ–ø—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        await query.message.delete()
        return

    if order_option.option_type.value == OrderOptionTypeValues.TEXT.value:
        return await query.answer("–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)

    try:
        await order_choose_option_db.get_choose_option(callback_data.choose_id)
    except OrderOptionNotFoundError:
        await query.answer("–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω", show_alert=True)
        await query.message.delete()
        return

    match callback_data.a:
        case callback_data.ActionEnum.BACK_TO_ORDER_TYPE_MENU:
            await query.message.edit_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.opt_id
                ),
            )

        case callback_data.ActionEnum.EDIT_CHOOSE_OPTION_NAME:
            await query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞", reply_markup=ReplyBackBotMenuKeyboard.get_keyboard()
            )
            await state.set_state(States.WAITING_FOR_ORDER_CHOOSE_OPTION_TEXT)
            await state.set_data(
                {
                    "bot_id": callback_data.bot_id,
                    "order_option_id": callback_data.opt_id,
                    "order_choose_option_id": callback_data.choose_id,
                }
            )

        case callback_data.ActionEnum.DELETE_CHOOSE_OPTION:
            await order_choose_option_db.delete_choose_option(callback_data.choose_id)

            await query.answer("–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω!", show_alert=True)

            await query.message.edit_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                    callback_data.bot_id, callback_data.opt_id
                ),
            )


@custom_bot_editing_router.message(States.WAITING_FOR_ORDER_CHOOSE_OPTION_TEXT)
async def edit_choose_option_name(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()

        bot_id = state_data["bot_id"]
        custom_bot = await bot_db.get_bot(bot_id)
        order_option = await order_option_db.get_order_option(state_data["order_option_id"])
        choose_option = await order_choose_option_db.get_choose_option(state_data["order_choose_option_id"])

        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    f"–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ {choose_option.choose_option_name}",
                    reply_markup=InlineEditOrderChooseOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id, choose_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)

            case _:
                choose_option.choose_option_name = message.text

                await order_choose_option_db.update_choose_option(choose_option)

                await message.answer("–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    f"–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ {choose_option.choose_option_name}",
                    reply_markup=InlineEditOrderChooseOptionKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id, choose_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.SETTING_PROVIDER_TOKEN)
async def handle_provider_token_input(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()

        bot_id = state_data["bot_id"]
        custom_bot = await bot_db.get_bot(bot_id)
        custom_bot_data = await Bot(custom_bot.token).get_me()

        if custom_bot.payment_type == BotPaymentTypeValues.STARS:
            stars = True
        else:
            stars = False

        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–∞...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
                return await message.answer(
                    MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                    reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                        custom_bot.bot_id, custom_bot.options_id, stars
                    ),
                )
            case _:
                params = message.text.strip().split(":")
                if len(params) != 3:
                    return await message.answer(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.\n\n–§–æ—Ä–º–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:"
                        "\n–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:"
                        "\n<code>1149974399:TEST:3b592a9aaa1b54e58daa</code>"
                        "\n–î–ª—è —Ä–∞–±–æ—á–µ–π –æ–ø–ª–∞—Ç—ã:"
                        "\n<code>1149974399:LIVE:3b592a9aaa1b54e58daa</code>"
                    )
                if params[1] == "LIVE":
                    await message.answer("–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è <b><u>—Ä–∞–±–æ—á–µ–π</u></b> –æ–ø–ª–∞—Ç—ã.")
                elif params[1] == "TEST":
                    await message.answer("–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è <b><u>—Ç–µ—Å—Ç–æ–≤–æ–π</u></b> –æ–ø–ª–∞—Ç—ã.")
                else:
                    return await message.answer(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.\n\n–§–æ—Ä–º–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:"
                        "\n–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:"
                        "\n<code>1149974399:TEST:3b592a9aaa1b54e58daa</code>"
                        "\n–î–ª—è —Ä–∞–±–æ—á–µ–π –æ–ø–ª–∞—Ç—ã:"
                        "\n<code>1149974399:LIVE:3b592a9aaa1b54e58daa</code>"
                    )
                custom_bot.provider_token = message.text.strip()
                await bot_db.update_bot(custom_bot)
                return await message.answer(
                    MessageTexts.PAYMENT_SETUP.value.format(custom_bot_data.username),
                    reply_markup=await InlinePaymentSetupKeyboard.get_keyboard(
                        custom_bot.bot_id, custom_bot.options_id, stars
                    ),
                )
    else:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Provider Token –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@custom_bot_editing_router.message(States.WAITING_FOR_NEW_ORDER_CHOOSE_OPTION_TEXT)
async def make_new_choose_option(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()

        bot_id = state_data["bot_id"]
        custom_bot = await bot_db.get_bot(bot_id)
        order_option = await order_option_db.get_order_option(state_data["order_option_id"])

        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                    reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                await order_choose_option_db.add_choose_option(
                    OrderChooseOptionSchemaWithoutId(order_option_id=order_option.id, choose_option_name=message.text)
                )
                await message.answer(
                    "–ù–æ–≤–∞—è –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–ø—Ü–∏–∏ - {order_option.option_type.value}",
                    reply_markup=await InlineEditOrderOptionTypeKeyboard.get_keyboard(
                        custom_bot.bot_id, order_option.id
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)

    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.WAITING_FOR_NEW_ORDER_OPTION_TEXT)
async def create_new_order_option(message: Message, state: FSMContext):
    if message.text:
        state_data = await state.get_data()

        bot_id = state_data["bot_id"]
        custom_bot = await bot_db.get_bot(bot_id)
        order_options = await order_option_db.get_all_order_options(custom_bot.bot_id)
        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    **MessageTexts.generate_order_options_info(order_options),
                    reply_markup=await InlineBotEditOrderOptionsKeyboard.get_keyboard(custom_bot.bot_id),
                )

                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                sorted_oo = sorted(order_options, key=lambda x: x.position_index)

                if len(sorted_oo) == 0:
                    pos_ind = 1
                else:
                    pos_ind = sorted_oo[-1].position_index + 1
                await order_option_db.add_order_option(
                    OrderOptionSchemaWithoutId(
                        bot_id=custom_bot.bot_id, option_name=message.text, position_index=pos_ind
                    )
                )
                await message.answer("–ù–æ–≤–∞—è –æ–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                order_options = await order_option_db.get_all_order_options(custom_bot.bot_id)
                await message.answer(
                    **MessageTexts.generate_order_options_info(order_options),
                    reply_markup=await InlineBotEditOrderOptionsKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)

    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.EDITING_START_MESSAGE)
async def editing_start_message_handler(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""

    message_text = message.text
    if message_text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])

        match message.text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                try:
                    options = await option_db.get_option(custom_bot.options_id)
                except OptionNotFoundError:
                    new_options_id = await create_bot_options()
                    custom_bot.options_id = new_options_id
                    await bot_db.update_bot(custom_bot)
                    options = await option_db.get_option(new_options_id)
                # TODO add select lang
                raise Exception("IN DEV CREATING MULTI LANGUAGE MESSAGE EDITING")
                # options.start_msg = message_text
                await option_db.update_option(options)

                await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )

                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
    else:
        await message.answer("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.EDITING_DEFAULT_MESSAGE)
async def editing_default_message_handler(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""

    message_text = message.text
    if message_text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])

        match message_text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                try:
                    options = await option_db.get_option(custom_bot.options_id)
                except OptionNotFoundError:
                    new_options_id = await create_bot_options()
                    custom_bot.options_id = new_options_id
                    await bot_db.update_bot(custom_bot)
                    options = await option_db.get_option(new_options_id)
                # TODO add select lang
                raise Exception("IN DEV CREATING MULTI LANGUAGE MESSAGE EDITING")
                # options.default_msg = message_text
                await option_db.update_option(options)

                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞—Ç—ã—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞—Ç—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.EDITING_CUSTOM_COLOR)
async def editing_custom_color_handler(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""

    message_text = message.text.strip()
    if message_text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])

        match message_text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                if not is_valid_hex_code(message_text) and message_text != "telegram":
                    return await message.answer(
                        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                        "<i>#FFFFFF</i> –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <i>telegram</i> –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤."
                    )

                new_color = message_text

                try:
                    options = await option_db.get_option(custom_bot.options_id)
                except OptionNotFoundError:
                    new_options_id = await create_bot_options()
                    custom_bot.options_id = new_options_id
                    await bot_db.update_bot(custom_bot)
                    options = await option_db.get_option(new_options_id)
                match state_data["color_param"]:
                    case "secondary_bg_color":
                        param_name = "—Ñ–æ–Ω–∞"
                        options.theme_params.secondary_bg_color = new_color
                    case "bg_color":
                        param_name = "–∫–∞—Ä—Ç–æ—á–µ–∫"
                        options.theme_params.bg_color = new_color
                    case "text_color":
                        param_name = "—Ç–µ–∫—Å—Ç–∞"
                        options.theme_params.text_color = new_color
                    case "button_color":
                        param_name = "–∫–Ω–æ–ø–æ–∫"
                        options.theme_params.button_color = new_color
                    case "button_text_color":
                        param_name = "—Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫"
                        options.theme_params.button_text_color = new_color
                    case _:
                        return await message.answer(
                            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑."
                        )

                await option_db.update_option(options)

                await message.answer(f"–¶–≤–µ—Ç {param_name} –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotSettingsMenuKeyboard.get_keyboard(custom_bot.bot_id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
    else:
        await message.answer("–¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@custom_bot_editing_router.message(States.EDITING_POST_ORDER_MESSAGE)
async def editing_post_order_message_handler(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    message_text = message.html_text
    if message_text:
        state_data = await state.get_data()
        custom_bot = await bot_db.get_bot(state_data["bot_id"])
        custom_bot_data = await Bot(custom_bot.token).get_me()

        match message_text:
            case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
                await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã...", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
                await message.answer(
                    MessageTexts.PAYMENT_METHOD_SETTINGS.value.format(custom_bot_data.username),
                    reply_markup=await InlinePaymentSettingsKeyboard.get_keyboard(
                        custom_bot.bot_id, custom_bot.payment_type
                    ),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
            case _:
                try:
                    options = await option_db.get_option(custom_bot.options_id)
                except OptionNotFoundError:
                    new_options_id = await create_bot_options()
                    custom_bot.options_id = new_options_id
                    await bot_db.update_bot(custom_bot)
                    options = await option_db.get_option(new_options_id)
                options.post_order_msg = message_text
                await option_db.update_option(options)

                await message.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=ReplyBotMenuKeyboard.get_keyboard()
                )
                await message.answer(
                    MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                    reply_markup=await InlineBotMenuKeyboard.get_keyboard(custom_bot.bot_id, message.from_user.id),
                )
                await state.set_state(States.BOT_MENU)
                await state.set_data(state_data)
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç")


@custom_bot_editing_router.message(States.DELETE_BOT)
async def delete_bot_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""

    message_text = message.text
    state_data = await state.get_data()
    custom_bot = await bot_db.get_bot(state_data["bot_id"])

    match message_text:
        case ReplyBackBotMenuKeyboard.Callback.ActionEnum.BACK_TO_BOT_MENU.value:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=ReplyBotMenuKeyboard.get_keyboard())
            await message.answer(
                MessageTexts.BOT_MENU_MESSAGE.value.format((await Bot(custom_bot.token).get_me()).username),
                reply_markup=await InlineBotMenuKeyboard.get_keyboard(custom_bot.bot_id, message.from_user.id),
            )
            await state.set_state(States.BOT_MENU)
            await state.set_data(state_data)

        case "–ü–û–î–¢–í–ï–†–î–ò–¢–¨":
            logger.info(f"Disabling bot {state_data['bot_id']}, setting deleted status to db...")
            custom_bot.status = "Deleted"
            await bot_db.del_bot(custom_bot.bot_id)

            await message.answer("–ë–æ—Ç —É–¥–∞–ª–µ–Ω", reply_markup=OurReplyKeyboardRemove())
            await greetings_message(bot, None, message)
            await state.set_state(States.WAITING_FOR_TOKEN)
            await state.set_data({"bot_id": -1})

        case _:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
