from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from bot.main import contest_user_db
from bot.utils.keyboard_utils import *


def get_show_inline_button(bot_id: int, partnership: bool = False) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=make_webapp_info(bot_id))]
    ], resize_keyboard=True, one_time_keyboard=False)


async def get_inline_bot_channel_post_menu_keyboard(bot_id: int, channel_id: int, is_contest: bool = False) -> InlineKeyboardMarkup:
    callback_metadata = f":{bot_id}:{channel_id}"
    channel_post = await channel_post_db.get_channel_post(channel_id=channel_id, is_contest=is_contest)
    if is_contest:
        callback_metadata += f":{channel_post.channel_post_id}"

    if channel_post.is_delayed:
        delay_btn = InlineKeyboardButton(
            text="–£–±—Ä–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ", callback_data="channel_menu:cancel_delay" + callback_metadata)
    else:
        delay_btn = InlineKeyboardButton(
            text="–û—Ç–ª–æ–∂–∏—Ç—å", callback_data="channel_menu:delay" + callback_metadata)
    if channel_post.is_running == True:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="channel_menu:stop_post" + callback_metadata)]
            ]
        )
    inline_buttons = [
        [
            # InlineKeyboardButton(
            #     text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data="channel_menu:get_contest_end_date" + callback_metadata
            # ),
            InlineKeyboardButton(
                text="–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="channel_menu:pick_contest_type" + callback_metadata
            )
        ],
        # [
        #     InlineKeyboardButton(
        #         text="–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data="channel_menu:get_contest_winner_amount" + callback_metadata),
        #     InlineKeyboardButton(
        #         text="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è", callback_data="channel_menu:get_contest_button_text" + callback_metadata)
        # ]
    ]
    # if channel_post.contest_type == ContestTypeValues.SPONSOR:
    #     inline_buttons.append(
    #         [
    #             InlineKeyboardButton(
    #                 text="–í—ã–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="channel_menu:get_sponsors" + callback_metadata
    #             )
    #         ]
    #     )
    if not channel_post.is_contest:
        if channel_post.has_button:
            inline_buttons = [
                [
                    InlineKeyboardButton(
                        text="–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏", callback_data="channel_menu:button_url" + callback_metadata
                    ),
                    InlineKeyboardButton(
                        text="–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ", callback_data="channel_menu:button_text" + callback_metadata
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="channel_menu:delete_button" + callback_metadata
                    )
                ]
            ]
        else:
            inline_buttons = [
                [
                    InlineKeyboardButton(
                        text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="channel_menu:add_button" + callback_metadata
                    ),
                ]
            ]

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="channel_menu:message" + callback_metadata
            ),
            InlineKeyboardButton(
                text="–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã", callback_data="channel_menu:media" + callback_metadata
            )
        ],
        *inline_buttons,
        [
            InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="channel_menu:start" + callback_metadata
            ),
            InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="channel_menu:demo" + callback_metadata
            ),
        ],
        [
            delay_btn,
            InlineKeyboardButton(
                text="–î–æ–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="channel_menu:extra_settings" + callback_metadata
            ),
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="channel_menu:back_to_channel_list" + callback_metadata),
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data="channel_menu:delete_channel_post" + callback_metadata
            ),
        ]
    ])


async def get_contest_menu_keyboard(bot_id: int, channel_id: int, is_contest: bool = True) -> InlineKeyboardMarkup:
    callback_metadata = f":{bot_id}:{channel_id}"
    if is_contest:
        channel_post = await channel_post_db.get_channel_post(channel_id, True)
        callback_metadata += f":{channel_post.channel_post_id}"
    keyboard = [
        [
            InlineKeyboardButton(
                text="–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä", callback_data="channel_menu:pick_random_contest" + callback_metadata
            ),
            InlineKeyboardButton(
                text="–°–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ", callback_data="channel_menu:pick_sponsor_contest" + callback_metadata
            )
        ],
        [
            InlineKeyboardButton(
                text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data="channel_menu:get_contest_end_date" + callback_metadata
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data="channel_menu:get_contest_winner_amount" + callback_metadata),
            InlineKeyboardButton(
                text="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è", callback_data="channel_menu:get_contest_button_text" + callback_metadata)
        ],
    ]
    if channel_post.contest_type == ContestTypeValues.SPONSOR:
        keyboard.append([
            InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="channel_menu:get_sponsors" + callback_metadata
            )
        ])
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", callback_data="channel_menu:back_to_editing_channel_post" + callback_metadata
        )
    ],)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_contest_inline_join_button(channel_id: int):
    try:
        channel_post = await channel_post_db.get_channel_post(channel_id=channel_id, is_contest=True)
        users = await contest_user_db.get_contest_users_by_contest_id(channel_post.channel_post_id)
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"{channel_post.button_text.split()[0]} ({len(users)})", callback_data=f"{channel_post.button_query}"
                    ),
                ],
            ]
        )
    except ChannelPostNotFound:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ö–æ–Ω–∫—É—Ä—Å –∑–∞–∫–æ–Ω—á–µ–Ω", callback_data=f"{channel_post.button_query}"
                    ),
                ],
            ]
        )
