from enum import Enum

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import Message, User

from common_utils.env_config import ADMIN_GROUP_ID, TELEGRAM_TOKEN

from logs.config import logger


class EventTypes(Enum):
    NEW_USER = ("üÜï –° –±–æ—Ç–æ–º <b>@{}</b> –∑–∞–≤–µ–ª –¥–∏–∞–ª–æ–≥ <b>–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>!\n\n"
                "–ï–≥–æ –¥–∞–Ω–Ω—ã–µ:\n"
                "id = <b>{}</b>, username = @<b>{}</b>\n"
                "–ò–º—è = <b>{}</b>", None)
    STARTED_TRIAL = (
        "‚ö† <b>@{}</b> (<b>{}</b>) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å <b>–ø—Ä–æ–±–Ω—É—é</b> –ø–æ–¥–ø–∏—Å–∫—É... (<b>@{}</b>)",
        "üçü <b>@{}</b> (<b>{}</b>) –ø—Ä–∏–Ω—è–ª <b>–ø—Ä–æ–±–Ω—É—é</b> –ø–æ–¥–ø–∏—Å–∫—É! (<b>@{}</b>)"
    )
    SUBSCRIBED = (
        "‚ö†‚ö† –î–ª—è <b>@{}</b> (<b>{}</b>) –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è <b>–ü–õ–ê–¢–ù–ê–Ø</b> –ø–æ–¥–ø–∏—Å–∫–∞... (<b>@{}</b>)",
        "üéâ‚ú®‚úÖ <b>@{}</b> (<b>{}</b>) –æ—Ñ–æ—Ä–º–∏–ª <b>–ü–õ–ê–¢–ù–£–Æ</b> –ø–æ–¥–ø–∏—Å–∫—É! (<b>@{}</b>)"
    )
    UNKNOWN_ERROR = ("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
                     "\n\nBot: <b>@{}</b>"
                     "\n\nUsername: <b>{}</b>"
                     "\n\nUID: <b>{}</b>"
                     "\n\nError message: \n<code>{}</code>",
                     None)


async def send_event(
        user: User,
        event_type: EventTypes,
        event_bot: Bot = Bot(TELEGRAM_TOKEN),
        err_msg: str = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
) -> Message:
    try:
        bot_username = (await event_bot.get_me()).username
        message_text = ""
        event_type_text = event_type.value[0]
        match event_type:
            case EventTypes.NEW_USER:
                message_text = event_type_text.format(bot_username, user.id, user.username, user.full_name)
            case EventTypes.STARTED_TRIAL | EventTypes.SUBSCRIBED:
                message_text = event_type_text.format(user.username, user.id, bot_username)
            case EventTypes.UNKNOWN_ERROR:
                message_text = event_type_text.format(bot_username,
                                                      '@' + user.username if user.username else user.full_name,
                                                      user.id,
                                                      err_msg)
        return await event_bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=message_text
        )
    except Exception as e:
        logger.warning(
            f"cant send event to admin group (event_type: {event_type}).", exc_info=e
        )


async def success_event(user: User, event_bot: Bot, message: Message, event_type: EventTypes):
    try:
        bot_username = (await event_bot.get_me()).username
        message_text = ""
        event_type_text = event_type.value[1]
        match event_type:
            case EventTypes.NEW_USER:
                pass  # should be so
            case EventTypes.STARTED_TRIAL | EventTypes.SUBSCRIBED:
                message_text = event_type_text.format(user.username, user.id, bot_username)
        await message.edit_text(
            text=message_text,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.warning(
            f"cant edit event message in admin group (event_type: {event_type}).", exc_info=e
        )
