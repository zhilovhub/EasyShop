from enum import Enum
from typing import Any

from database.models.order_model import OrderSchema, OrderItemExtraOption
from database.models.product_model import ProductSchema
from database.models.order_option_model import OrderOptionSchemaWithoutId

from aiogram.utils.formatting import Text, Bold

TEMP_order_options = {  # TODO —É–¥–∞–ª–∏—Ç—å, –∫–æ–≥–¥–∞ —Ñ—Ä–æ–Ω—Ç –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–ø—Ü–∏–∏
    0: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞",
        required=True,
        emoji="üë§",
        position_index=1,
    ),
    1: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        required=True,
        emoji="üì±",
        position_index=2,
    ),
    2: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–ì–æ—Ä–æ–¥",
        required=True,
        emoji="üåá",
        position_index=3,
    ),
    3: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
        required=True,
        emoji="üõ§",
        position_index=4,
    ),
    4: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
        required=True,
        emoji="‚è∞",
        position_index=5,
    ),
    5: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        required=True,
        emoji="üíå",
        position_index=6,
    ),
    6: OrderOptionSchemaWithoutId(
        bot_id=0,
        option_name="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏",
        required=True,
        emoji="üöê",
        position_index=7,
    ),
}


class MessageTexts(Enum):
    UNKNOWN_ERROR_MESSAGE = """
‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞

üèÉ‚Äç‚ôÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –∏ 24 —á–∞—Å–∞, –∫–∞–∫ –º—ã –≤—Å–µ —Ä–µ—à–∏–º –∏ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –í–∞—Å —á—É—Ç–æ—á–∫—É –∏–¥–µ–∞–ª—å–Ω–µ–µ, —á–µ–º –æ–Ω –±—ã–ª –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ ü´°

üìå –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å—Ä–æ—á–Ω–æ–µ –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã:
–°–¢–û: @Ilyyasha
    """  # noqa

    @staticmethod
    async def generate_order_notification_text(
        order: OrderSchema,
        products: list[tuple[ProductSchema, int, list[OrderItemExtraOption] | None]],
        username: str = "@username",
        is_admin: bool = False,
    ) -> dict[str, Any]:
        """
        Translate OrderSchema into the text for notifications
        :param order: the schema of the order
        :param username: the username of the person created an order
        :param is_admin: True if the order is from Admin test web app and False if from custom bot
        :param list products: [(ProductSchema, amount, [OrderItemExtraOption(), ...]), ...]
        """

        products_converted = []
        total_price = 0
        for ind, product_item in enumerate(products, start=1):
            product_schema, amount, extra_options = product_item
            products_converted.append(
                Text(
                    f"{ind}. ",
                    product_schema.convert_to_notification_text(count=amount, used_extra_options=extra_options),
                )
            )
            product_price = product_schema.price
            if extra_options:
                for option in extra_options:
                    if option.price:
                        product_price = option.price
            total_price += product_price * product_item[1]

        products_text = []
        for ind, product_converted in enumerate(products_converted, start=1):  # We can't use "\n".join() here
            products_text.append(product_converted)
            if ind != len(product_converted):
                products_text.append("\n")

        order_options = order.order_options
        order_options_text = Text()
        for order_option_id, value in order_options.items():
            # order_option = await order_option_db.get_order_option(order_option_id)
            order_option = TEMP_order_options[int(order_option_id)]  # TODO –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—à–ª—É—é —Å—Ç—Ä–æ–∫—É
            order_options_text += Text(
                f"{order_option.emoji} {order_option.option_name}: ", Bold(value if value else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), "\n"
            )

        if not is_admin:
            result = Text(
                "–í–∞—à –∑–∞–∫–∞–∑ ",
                Bold(f"#{order.id}\n\n"),
                "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: \n\n",
                *products_text,
                "\n\n",
                "–ò—Ç–æ–≥–æ: ",
                Bold(f"{total_price}‚ÇΩ\n\n"),
                order_options_text,
                "\n\n " "–°—Ç–∞—Ç—É—Å: ",
                Bold(order.translate_order_status()),
            )
        else:
            result = Text(
                "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ",
                Bold(f"#{order.id}\n"),
                "–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ",
                Bold(username),
                "\n\n",
                "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n",
                *products_text,
                "\n\n",
                "–ò—Ç–æ–≥–æ: ",
                Bold(f"{total_price}‚ÇΩ\n\n"),
                order_options_text,
                "\n\n" "–°—Ç–∞—Ç—É—Å: ",
                Bold(order.translate_order_status()),
            )

        return result.as_kwargs()
