import time

from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

from custom_bots.multibot import main_bot, CustomUserStates, QUESTION_MESSAGES
from custom_bots.handlers.routers import multi_bot_router
from custom_bots.keyboards.question_keyboards import InlineOrderQuestionKeyboard, ReplyBackQuestionMenuKeyboard
from custom_bots.keyboards.custom_bot_menu_keyboards import ReplyCustomBotMenuKeyboard
from custom_bots.utils.question_utils import is_able_to_ask

from database.config import bot_db, order_db
from database.models.order_model import OrderNotFound

from logs.config import custom_bot_logger, extra_params


@multi_bot_router.message(CustomUserStates.WAITING_FOR_QUESTION)
async def handle_waiting_for_question_state(message: Message, state: FSMContext):
    state_data = await state.get_data()

    user_id = message.from_user.id
    bot_data = await bot_db.get_bot_by_token(message.bot.token)

    match message.text:
        case ReplyBackQuestionMenuKeyboard.Callback.ActionEnum.BACK_TO_MAIN_MENU.value:
            await message.answer(
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=ReplyCustomBotMenuKeyboard.get_keyboard(bot_data.bot_id)
            )
        case _:
            if not state_data or 'order_id' not in state_data:
                custom_bot_logger.error(
                    f"user_id={user_id}: unable to accept a question due to lost order_id from state_data",
                    extra=extra_params(user_id=user_id)
                )
                raise Exception(f"user_id={user_id}: unable to accept a question due to lost order_id from state_data")

            order_id = state_data['order_id']

            await message.reply(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∫ –∑–∞–∫–∞–∑—É "
                f"<b>#{order_id}</b>?",
                reply_markup=InlineOrderQuestionKeyboard.get_keyboard(
                    order_id=order_id,
                    msg_id=message.message_id,
                    chat_id=message.chat.id
                ))
            await message.answer(
                f"\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π <b>–º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 1 —á–∞—Å</b> –∏–ª–∏ "
                f"<b>–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                reply_markup=ReplyCustomBotMenuKeyboard.get_keyboard(bot_data.bot_id)
            )

    await state.set_state(CustomUserStates.MAIN_MENU)
    await state.set_data(state_data)


@multi_bot_router.callback_query(lambda query: InlineOrderQuestionKeyboard.callback_validator(query.data))
async def ask_question_callback(query: CallbackQuery, state: FSMContext):
    callback_data = InlineOrderQuestionKeyboard.Callback.model_validate_json(
        query.data
    )
    state_data = await state.get_data()

    order_id = callback_data.order_id
    user_id = query.from_user.id
    bot_data = await bot_db.get_bot_by_token(query.bot.token)

    match callback_data.a:
        case callback_data.ActionEnum.APPROVE:
            try:
                order = await order_db.get_order(order_id)
            except OrderNotFound as e:
                custom_bot_logger.warning(
                    f"user_id={user_id}: unable to approve question due to lost order_id={order_id} from db",
                    extra=extra_params(user_id=user_id, order_id=order_id),
                    exc_info=e
                )
                await query.answer("–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
                return await query.message.edit_reply_markup(None)

            try:
                if not await is_able_to_ask(query, state_data, user_id, order_id):
                    return

                message = await main_bot.send_message(
                    chat_id=bot_data.created_by,
                    text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É <b>#{order_id}</b> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                         f"<b>"
                         f"{'@' + query.from_user.username if query.from_user.username else query.from_user.full_name}"
                         f"</b> üëá\n\n"
                         f"<i>{query.message.reply_to_message.text}</i>\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å <b>–∑–∞–∂–º–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ")

                question_messages_data = QUESTION_MESSAGES.get_data()
                question_messages_data[message.message_id] = {
                    "question_from_custom_bot_message_id": callback_data.msg_id,
                    "order_id": order_id
                }

                QUESTION_MESSAGES.update_data(question_messages_data)

                custom_bot_logger.info(
                    f"user_id={bot_data.created_by}: got question regarded to order_id={order.id} "
                    f"from user_id={user_id}",
                    extra=extra_params(user_id=bot_data.created_by, order_id=order.id)
                )

            except TelegramAPIError as e:
                await main_bot.send_message(
                    chat_id=bot_data.created_by,
                    text="–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ-–≤–æ–ø—Ä–æ—Å</b> –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, "
                         "–Ω–æ –í–∞—à–µ–º—É –±–æ—Ç—É <b>–Ω–µ —É–¥–∞–ª–æ—Å—å –í–∞–º –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>, "
                         "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Å–∞–ª–∏ –ª–∏ –í—ã —Ö–æ—Ç—å —Ä–∞–∑ —Å–≤–æ–µ–º—É –±–æ—Ç—É –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –µ–≥–æ"
                         f"\n\n* —Å—Å—ã–ª–∫–∞ –Ω–∞ –í–∞—à–µ–≥–æ –±–æ—Ç–∞ @{(await query.bot.get_me()).username}")

                custom_bot_logger.error(
                    f"user_id={bot_data.created_by}: couldn't get question regarded to "
                    f"order_id={order.id} from user_id={user_id}",
                    extra=extra_params(user_id=bot_data.created_by, order_id=order_id),
                    exc_info=e
                )

                await state.set_state(CustomUserStates.MAIN_MENU)
                return await query.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã",
                    show_alert=True
                )

            await query.message.edit_text(
                "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ", reply_markup=None
            )

            state_data['last_question_time'] = time.time()

            await state.set_state(CustomUserStates.MAIN_MENU)
            await state.set_data(state_data)

        case callback_data.a.CANCEL:
            cancel_text = "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–∞"
            await query.answer(
                cancel_text, show_alert=True
            )
            await query.message.answer(
                cancel_text,
                reply_markup=ReplyCustomBotMenuKeyboard.get_keyboard(bot_data.bot_id)
            )
            await query.message.edit_reply_markup(reply_markup=None)

            await state.set_state(CustomUserStates.MAIN_MENU)
